import hudson.scm.ChangeLogSet.AffectedFile
import hudson.scm.ChangeLogSet.Entry

def jenkins = Jenkins.getInstance()
def jobName = "full-test"
def job = jenkins.getItem(jobName)

println "Job type: ${job.getClass()}"
println "Is building: ${job.isBuilding()}"
println "Is in queue: ${job.isInQueue()}"
println "Last successfull build: ${job.getLastSuccessfulBuild()}"
println "Last failed build: ${job.getLastFailedBuild()}"
println "Last build: ${job.getLastBuild()}"
println "All builds: ${job.getBuilds().collect{ it.getNumber()}}"
println "Get changesets from build by number: ${job.getBuildByNumber(jo`b.getBuilds().collect{ it.getNumber()}[0]).getChangeSets()}"

for (i =0; i < job.getBuilds().collect{ it.getNumber()}.size(); i++){
  index = 0
  for (changes in job.getBuildByNumber(job.getBuilds().collect{ it.getNumber()}[i]).getChangeSets()){
    println "changes ${index}: ${changes}"
    List<Entry> entries = new LinkedList<Entry>()
    Set<AffectedFile> files = new HashSet<AffectedFile>()
    for (Object o : changes.getItems()) {
      Entry entry = (Entry) o
      entries.add(entry)
      files.addAll(entry.getAffectedFiles())
      println "AffectedFiles: ${entry.getAffectedPaths()}"
    }
    index++
  }
}


def getRevisionFromLastSuccessBuild(jobname){
    println "Start to find revision for job ${jobname}"
    def job = Jenkins.instance.getItem("${jobname}")
    def revision
    for (build in job.builds){
        println "Try to find commit info from build " + build.number
        if(build.result.toString().equals("SUCCESS")){
           for (def data in build.getActions(hudson.plugins.git.util.BuildData.class) ) {
               def repo = data.getRemoteUrls()[0].toString()
               revision = data.getLastBuiltRevision().getSha1String()
               println "Find revision = " + revision
           }
        }
        if (revision != null){
            return revision
        }
    }
}

def revisionMonitored = getRevisionFromLastSuccessBuild("full-test")
if(revisionMonitored == null){
  error('no any revision found')
}
println "find latest successful build with revision " + revisionMonitored + " from job " + "full-test"
def revisionSelf = getRevisionFromLastSuccessBuild("full-test")
if(revisionMonitored != revisionSelf) {
  echo 'trigger new job'
  echo 'tag'
}else{
  println "skip"
}

def lastSuccessfulBuild(passedBuilds, build) {
    if ((build != null) && (build.result != 'SUCCESS')) {
        passedBuilds.add(build)
        lastSuccessfulBuild(passedBuilds, build.getPreviousBuild())
    }
}


pipeline {
    agent any
    parameters {
        string(defaultValue: "full-test", description: "", name: "JOB_TO_MONITOR")
    }
    stages {
        stage('from full test') {
            steps {
                echo 'Checkout'
                script {
                  def revisionMonitored = getRevisionFromLastSuccessBuild("${params.JOB_TO_MONITOR}")
                  if(revisionMonitored == null){
                    error('no any revision found')
                  }
                  println "find latest successful build with revision " + revisionMonitored + " from job " + "${params.monitoredJobName}"
                  def revisionSelf = getRevisionFromLastSuccessBuild("${env.JOB_NAME}")
                  if(revisionMonitored != revisionSelf) {
                      echo 'trigger new job'
                      echo 'tag'
                  }else{
                      println "skip"
                  }
                }
            }
        }
    }
}


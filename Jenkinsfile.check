import hudson.scm.ChangeLogSet.AffectedFile
import hudson.scm.ChangeLogSet.Entry

def check_files(job, latestDailyCommit){
  def flag = false
  for (i = 0; i < job.getBuilds().collect{ it.getNumber()}.size(); i++){
    for (changes in job.getBuildByNumber(job.getBuilds().collect{ it.getNumber()}[i]).getChangeSets()){
      def changes_id = job.getBuildByNumber(job.getBuilds().collect{ it.getNumber()}[i])
      println "changes ${changes_id}: ${changes}"
      //List<Entry> entries = new LinkedList<Entry>()
      //Set<AffectedFile> files = new HashSet<AffectedFile>()
      for (Object o : changes.getItems()) {
        Entry entry = (Entry) o
        //entries.add(entry)
        //files.addAll(entry.getAffectedFiles())
        println "AffectedFiles: ${entry.getAffectedPaths()}"
        for (String affectedFile in entry.getAffectedPaths()){
          if (affectedFile ==~ /^test\/|^doc\//){
            println "Change: ${affectedFile} from Build: ${changes_id} is under test/doc folder"
          } else {
            println "Change: ${affectedFile} from Build: ${changes_id} is outside of test/doc folder."
            flag = true
          }
        }
        if (entry.getCommitId() == latestDailyCommit) {
          i = job.getBuilds().collect{ it.getNumber()}.size()
          break
      	}
      }
    }
  }
  return flag
}

def getRevisionFromLastSuccessBuild(jobname){
    println "Start to find revision for job ${jobname}"
    def job = Jenkins.instance.getItem("${jobname}")
    def revision
    for (build in job.builds){
        println "Try to find commit info from build " + build.number + " for job ${jobname}"
        if(build.result.toString().equals("SUCCESS")){
           for (def data in build.getActions(hudson.plugins.git.util.BuildData.class) ) {
               def repo = data.getRemoteUrls()[0].toString()
               revision = data.getLastBuiltRevision().getSha1String()
               println "Find revision = " + revision
           }
        }
        if (revision != null){
            return revision
        }
    }
}

def lastSuccessfulBuild(passedBuilds, build) {
    if ((build != null) && (build.result != 'SUCCESS')) {
        passedBuilds.add(build)
        lastSuccessfulBuild(passedBuilds, build.getPreviousBuild())
    }
}

pipeline {
    agent any
    parameters {
        string(defaultValue: "full-test", description: "", name: "JOB_TO_MONITOR")
    }
    stages {
        stage('from full test') {
            steps {
                echo 'Checkout'
                script {
                    def revisionMonitored = getRevisionFromLastSuccessBuild("${params.JOB_TO_MONITOR}")
                    if(revisionMonitored == null){
                      error('no any revision found')
                    }
                    println "find latest successful build with revision " + revisionMonitored + " from job " + "${params.JOB_TO_MONITOR}"
                    def revisionSelf = getRevisionFromLastSuccessBuild("${env.JOB_NAME}") 
                    println "find latest successful build with revision " + revisionSelf + " from job " + "${env.JOB_NAME}"
                    if(revisionMonitored != null) {
                        if(revisionMonitored != revisionSelf) {
                          if(check_files(params.JOB_TO_MONITOR, revisionSelf)){
                            println "trigger new job"
                            println "tag"
                          } else{
                            println "no tag"
                          }
                        } else{
                          println "skip"
                        }
                    } else {
                      println "skip"
                    }
                }
            }
        }
    }
}
